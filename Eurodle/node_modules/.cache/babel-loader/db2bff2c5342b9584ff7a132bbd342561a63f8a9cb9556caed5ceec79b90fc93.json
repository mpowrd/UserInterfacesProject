{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpord\\\\Documents\\\\3IngSoft\\\\2Cuatri\\\\IU\\\\UserInterfacesProject\\\\Eurodle\\\\src\\\\guessSong\\\\GuessSongGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport SettingsProvider from \"../SettingsProvider\";\nimport GuessForm from \"./GuessForm\";\nimport FeedbackDisplay from \"./FeedbackDisplay\";\nimport ClueDisplay from \"./ClueDisplay\";\nimport ExtraClues from \"./ExtraClues\";\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuessSongGame = () => {\n  _s();\n  const {\n    t\n  } = useTranslation(['guessSong', 'common']);\n  const totalIntentos = 8;\n  const [canciones, setCanciones] = useState([]);\n  const [cancionCorrecta, setCancionCorrecta] = useState(null);\n  const [fallos, setFallos] = useState([]);\n  const [pistas, setPistas] = useState([]);\n  const [intentosRestantes, setIntentosRestantes] = useState(totalIntentos); // Puedes ajustarlo a tu gusto\n  const [acertado, setAcertado] = useState(false);\n  useEffect(() => {\n    // Cargamos las caciones del csv al iniciar\n    Papa.parse(\"/canciones.csv\", {\n      header: true,\n      download: true,\n      complete: results => {\n        /*\r\n        Vamos a filtrar la cancion por el atributo song_name asegurandonos que\r\n        todos los campos clave existan y no estén vacíos.\r\n         */\n        const listaCanciones = results.data.filter(c => c.song_name && c.song_name.trim() !== \"\" && c.artist_name && c.artist_name.trim() !== \"\" && c.country && c.country.trim() !== \"\" && c.year && c.year.trim() !== \"\");\n        setCanciones(listaCanciones);\n\n        // Elegimos una canción aleatoria solo entre las válidas. Esta será la canción a adivinar\n        const randomIndex = Math.floor(Math.random() * listaCanciones.length);\n        const cancionSeleccionada = listaCanciones[randomIndex];\n        const cancionArriba = results.data.filter(c => c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) - 1 && c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year));\n        const cancionAbajo = results.data.filter(c => c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) + 1 && c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year));\n        const unknownText = t('guessSong:extraClues.clueTemplates.neighboursParts.unknown'); // Obtener texto traducido\n\n        cancionSeleccionada.paisArriba = cancionArriba.length === 0 ? unknownText : cancionArriba[0].country;\n        cancionSeleccionada.paisAbajo = cancionAbajo.length === 0 ? unknownText : cancionAbajo[0].country;\n        setCancionCorrecta(cancionSeleccionada);\n      },\n      error: error => {\n        console.error(t('common:other.errorLoading'), error);\n      }\n    });\n  }, [t]);\n  const handleGuess = (entrada, tipo) => {\n    if (!entrada) return;\n    let guess;\n    if (tipo === 0) {\n      guess = canciones.find(c => c.song_name.toLowerCase() === entrada.toLowerCase());\n    } else {\n      const partes = entrada.split(\"$songGuess$\");\n      guess = canciones.find(c => c.country.toLowerCase() === partes[0].toLowerCase() && c.year === partes[1]);\n    }\n    if (!guess) {\n      alert(t('guessSong:form.notFound', {\n        input: entrada\n      }));\n      return;\n    }\n\n    // Verificar si el intento es correcto\n    if (guess.song_name === cancionCorrecta.song_name) {\n      setAcertado(true);\n      alert(t('guessSong:form.correctGuess')); // Comentado, ya se muestra en FeedbackDisplay\n    } else {\n      // Añadimos el fallo\n      setFallos(prevFallos => [...prevFallos, guess]);\n      setIntentosRestantes(prev => prev - 1);\n    }\n\n    // Generar pistas\n    const pistasDelIntento = [{\n      atributo: \"Cantante\",\n      acertado: guess.artist_name === cancionCorrecta.artist_name ? \"✅\" : \"❌\"\n    }, {\n      atributo: \"País\",\n      acertado: guess.country === cancionCorrecta.country ? \"✅\" : \"❌\"\n    }, {\n      atributo: \"Año\",\n      acertado: (() => {\n        const guessYear = parseInt(guess.year);\n        const correctYear = parseInt(cancionCorrecta.year);\n        if (guessYear === correctYear) return \"✔️ Correcto\"; // Clave interna que ClueDisplay traducirá\n        if (guessYear < correctYear) return \"🔼 Busca más reciente\"; // Clave interna\n        return \"🔽 Busca más antiguo\"; // Clave interna\n      })()\n    }, {\n      atributo: \"Ranking\",\n      acertado: (() => {\n        const guessRank = parseInt(guess.final_place);\n        const correctRank = parseInt(cancionCorrecta.final_place);\n        if (guessRank === correctRank) return \"✔️ Correcto\"; // Clave interna\n        if (guessRank > correctRank) return \"🔼 Ranking más alto\"; // Clave interna\n        return \"🔽 Ranking más bajo\"; // Clave interna\n      })()\n    }];\n    setPistas(prevPistas => [...prevPistas, {\n      intento: guess,\n      pistas: pistasDelIntento\n    }]);\n  };\n  const reiniciarJuego = () => {\n    // Resetear todo\n    const randomIndex = Math.floor(Math.random() * canciones.length);\n    setCancionCorrecta(canciones[randomIndex]);\n    setFallos([]);\n    setPistas([]);\n    setIntentosRestantes(totalIntentos);\n    setAcertado(false);\n  };\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    if (cancionCorrecta) setIsLoading(false);\n  }, [cancionCorrecta]);\n\n  // Mostrar carga mientras cancionCorrecta es null\n  if (isLoading) {\n    // Línea ~130 (nueva): Mostrar mensaje de carga\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: t('common:other.loading')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \".eurodle-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-song-container\",\n      children: [cancionCorrecta ? cancionCorrecta.song_name + cancionCorrecta.year + cancionCorrecta.country : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenido-principal\",\n        children: [/*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n          fallos: fallos,\n          acertado: acertado,\n          cancionCorrecta: cancionCorrecta,\n          totalIntentos: totalIntentos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ClueDisplay, {\n          pistas: pistas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), !acertado && intentosRestantes > 0 && /*#__PURE__*/_jsxDEV(GuessForm, {\n          canciones: canciones,\n          onGuess: handleGuess,\n          fallos: fallos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), (acertado || intentosRestantes <= 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reiniciarJuego,\n          style: {\n            marginTop: \"20px\"\n          },\n          children: t('guessSong:game.restart')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ExtraClues, {\n          songData: cancionCorrecta,\n          fallos: fallos,\n          acertado: acertado\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(GuessSongGame, \"3ZVn/aPUb4O1Ao1teQEh8PFsoHI=\", false, function () {\n  return [useTranslation];\n});\n_c = GuessSongGame;\nexport default GuessSongGame;\nvar _c;\n$RefreshReg$(_c, \"GuessSongGame\");","map":{"version":3,"names":["React","useState","useEffect","Papa","SettingsProvider","GuessForm","FeedbackDisplay","ClueDisplay","ExtraClues","useTranslation","jsxDEV","_jsxDEV","GuessSongGame","_s","t","totalIntentos","canciones","setCanciones","cancionCorrecta","setCancionCorrecta","fallos","setFallos","pistas","setPistas","intentosRestantes","setIntentosRestantes","acertado","setAcertado","parse","header","download","complete","results","listaCanciones","data","filter","c","song_name","trim","artist_name","country","year","randomIndex","Math","floor","random","length","cancionSeleccionada","cancionArriba","final_place","parseInt","cancionAbajo","unknownText","paisArriba","paisAbajo","error","console","handleGuess","entrada","tipo","guess","find","toLowerCase","partes","split","alert","input","prevFallos","prev","pistasDelIntento","atributo","guessYear","correctYear","guessRank","correctRank","prevPistas","intento","reiniciarJuego","isLoading","setIsLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onGuess","onClick","style","marginTop","songData","_c","$RefreshReg$"],"sources":["C:/Users/mpord/Documents/3IngSoft/2Cuatri/IU/UserInterfacesProject/Eurodle/src/guessSong/GuessSongGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport SettingsProvider from \"../SettingsProvider\";\r\nimport GuessForm from \"./GuessForm\";\r\nimport FeedbackDisplay from \"./FeedbackDisplay\";\r\nimport ClueDisplay from \"./ClueDisplay\";\r\nimport ExtraClues from \"./ExtraClues\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nconst GuessSongGame = () => {\r\n    const { t } = useTranslation(['guessSong', 'common']);\r\n\r\n    const totalIntentos = 8;\r\n    const [canciones, setCanciones] = useState([]);\r\n    const [cancionCorrecta, setCancionCorrecta] = useState(null);\r\n    const [fallos, setFallos] = useState([]);\r\n    const [pistas, setPistas] = useState([]);\r\n    const [intentosRestantes, setIntentosRestantes] = useState(totalIntentos); // Puedes ajustarlo a tu gusto\r\n    const [acertado, setAcertado] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Cargamos las caciones del csv al iniciar\r\n        Papa.parse(\"/canciones.csv\", {\r\n            header: true,\r\n            download: true,\r\n            complete: (results) => {\r\n                /*\r\n                Vamos a filtrar la cancion por el atributo song_name asegurandonos que\r\n                todos los campos clave existan y no estén vacíos.\r\n                 */\r\n                const listaCanciones = results.data.filter(c =>\r\n                    c.song_name && c.song_name.trim() !== \"\" &&\r\n                    c.artist_name && c.artist_name.trim() !== \"\" &&\r\n                    c.country && c.country.trim() !== \"\" &&\r\n                    c.year && c.year.trim() !== \"\"\r\n                );\r\n\r\n                setCanciones(listaCanciones);\r\n\r\n                // Elegimos una canción aleatoria solo entre las válidas. Esta será la canción a adivinar\r\n                const randomIndex = Math.floor(Math.random() * listaCanciones.length);\r\n                const cancionSeleccionada = listaCanciones[randomIndex];\r\n\r\n                const cancionArriba = results.data.filter(c =>\r\n                    c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) - 1 &&\r\n                    c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year)\r\n                );\r\n\r\n                const cancionAbajo = results.data.filter(c =>\r\n                    c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) + 1 &&\r\n                    c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year)\r\n                );\r\n\r\n                const unknownText = t('guessSong:extraClues.clueTemplates.neighboursParts.unknown'); // Obtener texto traducido\r\n\r\n                cancionSeleccionada.paisArriba = cancionArriba.length === 0 ? unknownText : cancionArriba[0].country;\r\n                cancionSeleccionada.paisAbajo = cancionAbajo.length === 0 ? unknownText : cancionAbajo[0].country;\r\n\r\n                setCancionCorrecta(cancionSeleccionada);\r\n            },\r\n            error: (error) => {\r\n                console.error(t('common:other.errorLoading'), error);\r\n            }\r\n        });\r\n    }, [t]);\r\n\r\n    const handleGuess = (entrada, tipo) => {\r\n        if (!entrada) return;\r\n\r\n        let guess;\r\n\r\n        if(tipo === 0){\r\n            guess = canciones.find((c) => c.song_name.toLowerCase() === entrada.toLowerCase());\r\n        } else{\r\n            const partes = entrada.split(\"$songGuess$\");\r\n            guess = canciones.find((c) => c.country.toLowerCase() === partes[0].toLowerCase()\r\n            && c.year === partes[1]);\r\n        }\r\n\r\n        if (!guess) {\r\n            alert(t('guessSong:form.notFound', { input: entrada }));\r\n            return;\r\n        }\r\n\r\n        // Verificar si el intento es correcto\r\n        if (guess.song_name === cancionCorrecta.song_name) {\r\n            setAcertado(true);\r\n            alert(t('guessSong:form.correctGuess')); // Comentado, ya se muestra en FeedbackDisplay\r\n        } else {\r\n            // Añadimos el fallo\r\n            setFallos((prevFallos) => [...prevFallos, guess]);\r\n            setIntentosRestantes((prev) => prev - 1);\r\n        }\r\n\r\n        // Generar pistas\r\n        const pistasDelIntento = [\r\n            { atributo: \"Cantante\", acertado: guess.artist_name === cancionCorrecta.artist_name ? \"✅\" : \"❌\" },\r\n            { atributo: \"País\", acertado: guess.country === cancionCorrecta.country ? \"✅\" : \"❌\" },\r\n            {\r\n                atributo: \"Año\",\r\n                acertado: (() => {\r\n                    const guessYear = parseInt(guess.year);\r\n                    const correctYear = parseInt(cancionCorrecta.year);\r\n                    if (guessYear === correctYear) return \"✔️ Correcto\"; // Clave interna que ClueDisplay traducirá\r\n                    if (guessYear < correctYear) return \"🔼 Busca más reciente\"; // Clave interna\r\n                    return \"🔽 Busca más antiguo\"; // Clave interna\r\n                })()\r\n            },\r\n            {\r\n                atributo: \"Ranking\",\r\n                acertado: (() => {\r\n                    const guessRank = parseInt(guess.final_place);\r\n                    const correctRank = parseInt(cancionCorrecta.final_place);\r\n                    if (guessRank === correctRank) return \"✔️ Correcto\"; // Clave interna\r\n                    if (guessRank > correctRank) return \"🔼 Ranking más alto\"; // Clave interna\r\n                    return \"🔽 Ranking más bajo\"; // Clave interna\r\n                })()\r\n            }\r\n        ];\r\n\r\n        setPistas((prevPistas) => [...prevPistas, { intento: guess, pistas: pistasDelIntento }]);\r\n    };\r\n\r\n    const reiniciarJuego = () => {\r\n        // Resetear todo\r\n        const randomIndex = Math.floor(Math.random() * canciones.length);\r\n        setCancionCorrecta(canciones[randomIndex]);\r\n        setFallos([]);\r\n        setPistas([]);\r\n        setIntentosRestantes(totalIntentos);\r\n        setAcertado(false);\r\n    };\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    useEffect(() => {\r\n        if(cancionCorrecta) setIsLoading(false);\r\n    }, [cancionCorrecta]);\r\n\r\n\r\n    // Mostrar carga mientras cancionCorrecta es null\r\n    if (isLoading) {\r\n        // Línea ~130 (nueva): Mostrar mensaje de carga\r\n        return <div>{t('common:other.loading')}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\".eurodle-wrapper\">\r\n            <div className=\"guess-song-container\">\r\n\r\n                {cancionCorrecta? cancionCorrecta.song_name + cancionCorrecta.year + cancionCorrecta.country : \"\"}\r\n\r\n                <div className=\"contenido-principal\">\r\n\r\n                    {/* Visualización de fallos */}\r\n                    <FeedbackDisplay fallos={fallos} acertado={acertado} cancionCorrecta={cancionCorrecta} totalIntentos={totalIntentos}/>\r\n\r\n                    {/* Visualización de pistas */}\r\n                    <ClueDisplay pistas={pistas}/>\r\n\r\n                    {/* Formulario de adivinanza */}\r\n                    {!acertado && intentosRestantes > 0 && (\r\n                        <GuessForm canciones={canciones} onGuess={handleGuess} fallos={fallos} />\r\n                    )}\r\n                    {/* Botón para reiniciar cuando acabe el juego */}\r\n                    {(acertado || intentosRestantes <= 0) && (\r\n                        <button onClick={reiniciarJuego} style={{ marginTop: \"20px\" }}>\r\n                            {t('guessSong:game.restart')}\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* Pistas adicionales progresivas */}\r\n                    <ExtraClues songData={cancionCorrecta} fallos={fallos} acertado={acertado}/>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GuessSongGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}