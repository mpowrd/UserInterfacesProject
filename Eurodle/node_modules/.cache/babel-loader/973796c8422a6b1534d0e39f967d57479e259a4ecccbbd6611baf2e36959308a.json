{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpord\\\\Documents\\\\3IngSoft\\\\2Cuatri\\\\IU\\\\UserInterfacesProject\\\\Eurodle\\\\src\\\\guessSong\\\\ExtraClues.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport YouTubePlayer from './YouTubePlayer';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExtraClues = ({\n  songData,\n  fallos,\n  acertado\n}) => {\n  _s();\n  var _songData$song_name, _songData$song_name2;\n  const {\n    t\n  } = useTranslation('guessSong');\n  const [videoDisplayed, setVideoDisplayed] = useState(false);\n  if (!songData) return null;\n  const minStart = 6;\n  const startTime = Math.floor(Math.random() * (100 - minStart)) + minStart;\n\n  // Extract video ID from YouTube URL\n  const getVideoId = url => {\n    if (!url) return '';\n    const match = url.match(/(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))([^?&]+)/i);\n    return match && match[1] ? match[1] : '';\n  };\n  const videoId = getVideoId(songData.youtube_url);\n  const pistasDisponibles = [t('extraClues.clueTemplates.rank', {\n    rank: songData.final_place || '?'\n  }), (() => {\n    const paisAbajo = songData.paisAbajo === \"Desconocido\" ? t('extraClues.clueTemplates.neighboursParts.unknown') : songData.paisAbajo;\n    const paisArriba = songData.paisArriba === \"Desconocido\" ? t('extraClues.clueTemplates.neighboursParts.unknown') : songData.paisArriba;\n    const partBelow = paisAbajo !== t('extraClues.clueTemplates.neighboursParts.unknown') ? t('extraClues.clueTemplates.neighboursParts.below', {\n      country: paisAbajo\n    }) : \"\";\n    const partAbove = paisArriba !== t('extraClues.clueTemplates.neighboursParts.unknown') ? t('extraClues.clueTemplates.neighboursParts.above', {\n      country: paisArriba\n    }) : \"\";\n    const separator = partBelow && partAbove ? t('extraClues.clueTemplates.neighboursParts.separator') : \"\";\n    return t('extraClues.clueTemplates.neighbours', {\n      below: partBelow,\n      separator: separator,\n      above: partAbove\n    });\n  })(), t('extraClues.clueTemplates.langStyle', {\n    language: songData.language || '?',\n    style: songData.style || '?'\n  }), t('extraClues.clueTemplates.letters', {\n    firstLetter: ((_songData$song_name = songData.song_name) === null || _songData$song_name === void 0 ? void 0 : _songData$song_name.charAt(0)) || '?',\n    lastLetter: ((_songData$song_name2 = songData.song_name) === null || _songData$song_name2 === void 0 ? void 0 : _songData$song_name2.slice(-1)) || '?'\n  }), t('extraClues.clueTemplates.lyrics', {\n    fragment: obtenerFragmentoOptimizado(songData.lyrics || '')\n  }), t('extraClues.clueTemplates.artist', {\n    artistName: songData.artist_name || '?'\n  }), {\n    type: 'component',\n    component: /*#__PURE__*/_jsxDEV(YouTubePlayer, {\n      videoId: videoId,\n      startTime: startTime,\n      setVideoDisplayed: setVideoDisplayed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 41\n    }, this)\n  }];\n  function obtenerFragmentoOptimizado(texto, minLong = 70, maxLong = 100, intentos = 10) {\n    const limpio = texto.replace(/(\\\\n\\s*){1,}/g, \", \") // Agrupa 1 o más \\n seguidos como una coma\n    .replace(/\\s+/g, \" \") // Normaliza los espacios\n    .trim();\n    const palabras = limpio.split(\" \");\n    const totalPalabras = palabras.length;\n    for (let i = 0; i < intentos; i++) {\n      let inicio = Math.floor(Math.random() * totalPalabras);\n      let fragmento = \"\";\n      let j = inicio;\n      while (j < totalPalabras && (fragmento + palabras[j]).length <= maxLong) {\n        fragmento += (fragmento ? \" \" : \"\") + palabras[j];\n        j++;\n      }\n      if (fragmento.length >= minLong) {\n        if (fragmento[fragmento.length - 1] === \",\") fragmento = fragmento.slice(0, fragmento.length - 1);\n        return '\"' + fragmento + '...\"';\n      }\n    }\n\n    // Fallback: si no se encontró un fragmento bueno tras varios intentos\n    let fragmento = texto.slice(0, maxLong).split(\" \").slice(0, -1).join(\" \");\n    if (fragmento[fragmento.length - 1] === \",\") fragmento = fragmento.slice(0, fragmento.length - 1);\n    return '\"' + fragmento + '...\"';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"extra-clues\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: t('extraClues.title')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"extra-clues-list\",\n      children: pistasDisponibles.map((pista, index) => {\n        const desbloqueada = fallos.length > index || acertado;\n        const pistaIndex = index + 1;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `clue-block ${desbloqueada ? \"unlocked\" : \"locked\"}`,\n          children: desbloqueada ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [t('extraClues.unlockedPrefix'), pista.type === 'component' ? videoDisplayed === false ? pista.component : t('extraClues.videoCompleted') : pista]\n          }, void 0, true) :\n          // Línea ~95: Usar texto traducido para pista bloqueada\n          t('extraClues.locked', {\n            index: pistaIndex\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(ExtraClues, \"EObdPzaRgFvmY2Cph7uZnHoww98=\", false, function () {\n  return [useTranslation];\n});\n_c = ExtraClues;\nexport default ExtraClues;\nvar _c;\n$RefreshReg$(_c, \"ExtraClues\");","map":{"version":3,"names":["React","useState","YouTubePlayer","useTranslation","jsxDEV","_jsxDEV","Fragment","_Fragment","ExtraClues","songData","fallos","acertado","_s","_songData$song_name","_songData$song_name2","t","videoDisplayed","setVideoDisplayed","minStart","startTime","Math","floor","random","getVideoId","url","match","videoId","youtube_url","pistasDisponibles","rank","final_place","paisAbajo","paisArriba","partBelow","country","partAbove","separator","below","above","language","style","firstLetter","song_name","charAt","lastLetter","slice","fragment","obtenerFragmentoOptimizado","lyrics","artistName","artist_name","type","component","fileName","_jsxFileName","lineNumber","columnNumber","texto","minLong","maxLong","intentos","limpio","replace","trim","palabras","split","totalPalabras","length","i","inicio","fragmento","j","join","className","children","map","pista","index","desbloqueada","pistaIndex","_c","$RefreshReg$"],"sources":["C:/Users/mpord/Documents/3IngSoft/2Cuatri/IU/UserInterfacesProject/Eurodle/src/guessSong/ExtraClues.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport YouTubePlayer from './YouTubePlayer';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst ExtraClues = ({ songData, fallos, acertado }) => {\r\n    const { t } = useTranslation('guessSong');\r\n\r\n    const [videoDisplayed, setVideoDisplayed] = useState(false);\r\n\r\n    if (!songData) return null;\r\n\r\n    const minStart = 6;\r\n    const startTime = Math.floor(Math.random() * (100 - minStart)) + minStart;\r\n\r\n    // Extract video ID from YouTube URL\r\n    const getVideoId = (url) => {\r\n        if (!url) return '';\r\n        const match = url.match(/(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))([^?&]+)/i);\r\n        return match && match[1] ? match[1] : '';\r\n    };\r\n\r\n    const videoId = getVideoId(songData.youtube_url);\r\n\r\n    const pistasDisponibles = [\r\n\r\n        t('extraClues.clueTemplates.rank', { rank: songData.final_place || '?' }),\r\n\r\n        (() => {\r\n            const paisAbajo = songData.paisAbajo === \"Desconocido\" ? t('extraClues.clueTemplates.neighboursParts.unknown') : songData.paisAbajo;\r\n            const paisArriba = songData.paisArriba === \"Desconocido\" ? t('extraClues.clueTemplates.neighboursParts.unknown') : songData.paisArriba;\r\n            const partBelow = paisAbajo !== t('extraClues.clueTemplates.neighboursParts.unknown') ? t('extraClues.clueTemplates.neighboursParts.below', { country: paisAbajo }) : \"\";\r\n            const partAbove = paisArriba !== t('extraClues.clueTemplates.neighboursParts.unknown') ? t('extraClues.clueTemplates.neighboursParts.above', { country: paisArriba }) : \"\";\r\n            const separator = partBelow && partAbove ? t('extraClues.clueTemplates.neighboursParts.separator') : \"\";\r\n\r\n            return t('extraClues.clueTemplates.neighbours', { below: partBelow, separator: separator, above: partAbove });\r\n        })(),\r\n\r\n        t('extraClues.clueTemplates.langStyle', { language: songData.language || '?', style: songData.style || '?' }),\r\n\r\n        t('extraClues.clueTemplates.letters', { firstLetter: songData.song_name?.charAt(0) || '?', lastLetter: songData.song_name?.slice(-1) || '?' }),\r\n\r\n        t('extraClues.clueTemplates.lyrics', { fragment: obtenerFragmentoOptimizado(songData.lyrics || '') }),\r\n\r\n        t('extraClues.clueTemplates.artist', { artistName: songData.artist_name || '?' }),\r\n\r\n        { type: 'component', component: <YouTubePlayer videoId={videoId} startTime={startTime} setVideoDisplayed={setVideoDisplayed}/> },\r\n\r\n    ];\r\n\r\n    function obtenerFragmentoOptimizado(texto, minLong = 70, maxLong = 100, intentos = 10) {\r\n        const limpio = texto\r\n            .replace(/(\\\\n\\s*){1,}/g, \", \")  // Agrupa 1 o más \\n seguidos como una coma\r\n            .replace(/\\s+/g, \" \")            // Normaliza los espacios\r\n            .trim();\r\n        const palabras = limpio.split(\" \");\r\n        const totalPalabras = palabras.length;\r\n\r\n        for (let i = 0; i < intentos; i++) {\r\n            let inicio = Math.floor(Math.random() * totalPalabras);\r\n            let fragmento = \"\";\r\n            let j = inicio;\r\n\r\n            while (j < totalPalabras && (fragmento + palabras[j]).length <= maxLong) {\r\n                fragmento += (fragmento ? \" \" : \"\") + palabras[j];\r\n                j++;\r\n            }\r\n\r\n            if (fragmento.length >= minLong) {\r\n                if(fragmento[fragmento.length-1] === \",\") fragmento = fragmento.slice(0, fragmento.length-1)\r\n                return '\"' + fragmento + '...\"';\r\n            }\r\n        }\r\n\r\n        // Fallback: si no se encontró un fragmento bueno tras varios intentos\r\n        let fragmento = texto.slice(0, maxLong).split(\" \").slice(0, -1).join(\" \");\r\n        if(fragmento[fragmento.length-1] === \",\") fragmento = fragmento.slice(0, fragmento.length-1)\r\n        return '\"' + fragmento + '...\"';\r\n    }\r\n\r\n    return (\r\n        <div className=\"extra-clues\">\r\n            <h2>{t('extraClues.title')}</h2>\r\n            <ul className=\"extra-clues-list\">\r\n                {pistasDisponibles.map((pista, index) => {\r\n                    const desbloqueada = fallos.length > index || acertado;\r\n                    const pistaIndex = index + 1;\r\n                    return (\r\n                        <li key={index} className={`clue-block ${desbloqueada ? \"unlocked\" : \"locked\"}`}>\r\n                            {desbloqueada ? (\r\n                                <>\r\n                                    {/* Línea ~90: Añadir prefijo traducido */}\r\n                                    {t('extraClues.unlockedPrefix')}\r\n                                    {/* Línea ~91: Usar texto traducido si el video se completó */}\r\n                                    {pista.type === 'component' ? (videoDisplayed === false ? pista.component : t('extraClues.videoCompleted')) : pista}\r\n                                </>\r\n                            ) : (\r\n                                // Línea ~95: Usar texto traducido para pista bloqueada\r\n                                t('extraClues.locked', { index: pistaIndex })\r\n                            )}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExtraClues;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}