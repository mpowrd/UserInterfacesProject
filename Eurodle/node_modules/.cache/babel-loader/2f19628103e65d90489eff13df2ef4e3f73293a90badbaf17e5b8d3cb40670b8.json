{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mpord\\\\Documents\\\\3IngSoft\\\\2Cuatri\\\\IU\\\\UserInterfacesProject\\\\Eurodle\\\\src\\\\guessSong\\\\GuessSongGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Header from \"./Header\";\nimport SettingsModal from \"./SettingsModal\";\nimport GuessForm from \"./GuessForm\";\nimport FeedbackDisplay from \"./FeedbackDisplay\";\nimport ClueDisplay from \"./ClueDisplay\";\nimport ExtraClues from \"./ExtraClues\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuessSongGame = () => {\n  _s();\n  const totalIntentos = 8;\n  const [canciones, setCanciones] = useState([]);\n  const [cancionCorrecta, setCancionCorrecta] = useState(null);\n  const [fallos, setFallos] = useState([]);\n  const [pistas, setPistas] = useState([]);\n  const [intentosRestantes, setIntentosRestantes] = useState(totalIntentos); // Puedes ajustarlo a tu gusto\n  const [acertado, setAcertado] = useState(false);\n  useEffect(() => {\n    // Cargamos las caciones del csv al iniciar\n    Papa.parse(\"/canciones.csv\", {\n      header: true,\n      download: true,\n      complete: results => {\n        /*\r\n        Vamos a filtrar la cancion por el atributo song_name asegurandonos que\r\n        todos los campos clave existan y no est√©n vac√≠os.\r\n         */\n        const listaCanciones = results.data.filter(c => c.song_name && c.song_name.trim() !== \"\" && c.artist_name && c.artist_name.trim() !== \"\" && c.country && c.country.trim() !== \"\" && c.year && c.year.trim() !== \"\");\n        setCanciones(listaCanciones);\n\n        // Elegimos una canci√≥n aleatoria solo entre las v√°lidas. Esta ser√° la canci√≥n a adivinar\n        const randomIndex = Math.floor(Math.random() * listaCanciones.length);\n        const cancionSeleccionada = listaCanciones[randomIndex];\n        const cancionArriba = results.data.filter(c => c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) - 1 && c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year));\n        const cancionAbajo = results.data.filter(c => c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) + 1 && c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year));\n        cancionSeleccionada.paisArriba = cancionArriba.length === 0 ? \"Desconocido\" : cancionArriba[0].country;\n        cancionSeleccionada.paisAbajo = cancionAbajo.length === 0 ? \"Desconocido\" : cancionAbajo[0].country;\n        setCancionCorrecta(cancionSeleccionada);\n      },\n      error: error => {\n        console.error(\"Error al cargar el CSV:\", error);\n      }\n    });\n  }, []);\n  const handleGuess = (entrada, tipo) => {\n    if (!entrada) return;\n    let guess;\n    if (tipo === 0) {\n      guess = canciones.find(c => c.song_name.toLowerCase() === entrada.toLowerCase());\n    } else {\n      const partes = entrada.split(\"$songGuess$\");\n      guess = canciones.find(c => c.country.toLowerCase() === partes[0].toLowerCase() && c.year === partes[1]);\n    }\n    if (!guess) {\n      alert(\"Canci√≥n no encontrada. Aseg√∫rate de seleccionar de la lista. \" + entrada);\n      return;\n    }\n\n    // Verificar si el intento es correcto\n    if (guess.song_name === cancionCorrecta.song_name) {\n      setAcertado(true);\n      alert(\"¬°Correcto! Has adivinado la canci√≥n üéâ\");\n    } else {\n      // A√±adimos el fallo\n      setFallos(prevFallos => [...prevFallos, guess]);\n      setIntentosRestantes(prev => prev - 1);\n    }\n\n    // Generar pistas\n    const pistasDelIntento = [{\n      atributo: \"Cantante\",\n      acertado: guess.artist_name === cancionCorrecta.artist_name ? \"‚úÖ\" : \"‚ùå\"\n    }, {\n      atributo: \"Pa√≠s\",\n      acertado: guess.country === cancionCorrecta.country ? \"‚úÖ\" : \"‚ùå\"\n    }, {\n      atributo: \"A√±o\",\n      acertado: (() => {\n        const guessYear = parseInt(guess.year);\n        const correctYear = parseInt(cancionCorrecta.year);\n        if (guessYear === correctYear) return \"‚úîÔ∏è Correcto\";\n        if (guessYear < correctYear) return \"üîº Busca m√°s reciente\";\n        return \"üîΩ Busca m√°s antiguo\";\n      })()\n    }, {\n      atributo: \"Ranking\",\n      acertado: (() => {\n        const guessRank = parseInt(guess.final_place);\n        const correctRank = parseInt(cancionCorrecta.final_place);\n        if (guessRank === correctRank) return \"‚úîÔ∏è Correcto\";\n        if (guessRank > correctRank) return \"üîº Ranking m√°s alto\";\n        return \"üîΩ Ranking m√°s bajo\";\n      })()\n    }];\n    setPistas(prevPistas => [...prevPistas, {\n      intento: guess,\n      pistas: pistasDelIntento\n    }]);\n  };\n  const reiniciarJuego = () => {\n    // Resetear todo\n    const randomIndex = Math.floor(Math.random() * canciones.length);\n    setCancionCorrecta(canciones[randomIndex]);\n    setFallos([]);\n    setPistas([]);\n    setIntentosRestantes(totalIntentos);\n    setAcertado(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guess-song-game\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contenido-principal\",\n      children: [/*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n        fallos: fallos,\n        acertado: acertado,\n        cancionCorrecta: cancionCorrecta,\n        totalIntentos: totalIntentos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ClueDisplay, {\n        pistas: pistas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), !acertado && intentosRestantes > 0 && /*#__PURE__*/_jsxDEV(GuessForm, {\n        canciones: canciones,\n        onGuess: handleGuess,\n        fallos: fallos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), (acertado || intentosRestantes <= 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reiniciarJuego,\n        style: {\n          marginTop: \"20px\"\n        },\n        children: \"Reiniciar Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ExtraClues, {\n        songData: cancionCorrecta,\n        fallos: fallos,\n        acertado: acertado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(GuessSongGame, \"V+WrfRoDdlJX1SZzU67KkeFdFSk=\");\n_c = GuessSongGame;\nexport default GuessSongGame;\nvar _c;\n$RefreshReg$(_c, \"GuessSongGame\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Header","SettingsModal","GuessForm","FeedbackDisplay","ClueDisplay","ExtraClues","jsxDEV","_jsxDEV","GuessSongGame","_s","totalIntentos","canciones","setCanciones","cancionCorrecta","setCancionCorrecta","fallos","setFallos","pistas","setPistas","intentosRestantes","setIntentosRestantes","acertado","setAcertado","parse","header","download","complete","results","listaCanciones","data","filter","c","song_name","trim","artist_name","country","year","randomIndex","Math","floor","random","length","cancionSeleccionada","cancionArriba","final_place","parseInt","cancionAbajo","paisArriba","paisAbajo","error","console","handleGuess","entrada","tipo","guess","find","toLowerCase","partes","split","alert","prevFallos","prev","pistasDelIntento","atributo","guessYear","correctYear","guessRank","correctRank","prevPistas","intento","reiniciarJuego","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGuess","onClick","style","marginTop","songData","_c","$RefreshReg$"],"sources":["C:/Users/mpord/Documents/3IngSoft/2Cuatri/IU/UserInterfacesProject/Eurodle/src/guessSong/GuessSongGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport Header from \"./Header\";\r\nimport SettingsModal from \"./SettingsModal\";\r\nimport GuessForm from \"./GuessForm\";\r\nimport FeedbackDisplay from \"./FeedbackDisplay\";\r\nimport ClueDisplay from \"./ClueDisplay\";\r\nimport ExtraClues from \"./ExtraClues\";\r\n\r\nconst GuessSongGame = () => {\r\n    const totalIntentos = 8;\r\n    const [canciones, setCanciones] = useState([]);\r\n    const [cancionCorrecta, setCancionCorrecta] = useState(null);\r\n    const [fallos, setFallos] = useState([]);\r\n    const [pistas, setPistas] = useState([]);\r\n    const [intentosRestantes, setIntentosRestantes] = useState(totalIntentos); // Puedes ajustarlo a tu gusto\r\n    const [acertado, setAcertado] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Cargamos las caciones del csv al iniciar\r\n        Papa.parse(\"/canciones.csv\", {\r\n            header: true,\r\n            download: true,\r\n            complete: (results) => {\r\n                /*\r\n                Vamos a filtrar la cancion por el atributo song_name asegurandonos que\r\n                todos los campos clave existan y no est√©n vac√≠os.\r\n                 */\r\n                const listaCanciones = results.data.filter(c =>\r\n                    c.song_name && c.song_name.trim() !== \"\" &&\r\n                    c.artist_name && c.artist_name.trim() !== \"\" &&\r\n                    c.country && c.country.trim() !== \"\" &&\r\n                    c.year && c.year.trim() !== \"\"\r\n                );\r\n\r\n                setCanciones(listaCanciones);\r\n\r\n                // Elegimos una canci√≥n aleatoria solo entre las v√°lidas. Esta ser√° la canci√≥n a adivinar\r\n                const randomIndex = Math.floor(Math.random() * listaCanciones.length);\r\n                const cancionSeleccionada = listaCanciones[randomIndex];\r\n\r\n                const cancionArriba = results.data.filter(c =>\r\n                    c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) - 1 &&\r\n                    c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year)\r\n                );\r\n\r\n                const cancionAbajo = results.data.filter(c =>\r\n                    c.final_place && parseInt(c.final_place.trim()) === parseInt(cancionSeleccionada.final_place) + 1 &&\r\n                    c.year && parseInt(c.year.trim()) === parseInt(cancionSeleccionada.year)\r\n                );\r\n\r\n                cancionSeleccionada.paisArriba = cancionArriba.length === 0 ? \"Desconocido\" : cancionArriba[0].country;\r\n                cancionSeleccionada.paisAbajo = cancionAbajo.length === 0 ? \"Desconocido\" : cancionAbajo[0].country;\r\n\r\n                setCancionCorrecta(cancionSeleccionada);\r\n            },\r\n            error: (error) => {\r\n                console.error(\"Error al cargar el CSV:\", error);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleGuess = (entrada, tipo) => {\r\n        if (!entrada) return;\r\n\r\n        let guess;\r\n\r\n        if(tipo === 0){\r\n            guess = canciones.find((c) => c.song_name.toLowerCase() === entrada.toLowerCase());\r\n        } else{\r\n            const partes = entrada.split(\"$songGuess$\");\r\n            guess = canciones.find((c) => c.country.toLowerCase() === partes[0].toLowerCase()\r\n            && c.year === partes[1]);\r\n        }\r\n\r\n        if (!guess) {\r\n            alert(\"Canci√≥n no encontrada. Aseg√∫rate de seleccionar de la lista. \" + entrada);\r\n            return;\r\n        }\r\n\r\n        // Verificar si el intento es correcto\r\n        if (guess.song_name === cancionCorrecta.song_name) {\r\n            setAcertado(true);\r\n            alert(\"¬°Correcto! Has adivinado la canci√≥n üéâ\");\r\n        } else {\r\n            // A√±adimos el fallo\r\n            setFallos((prevFallos) => [...prevFallos, guess]);\r\n            setIntentosRestantes((prev) => prev - 1);\r\n        }\r\n\r\n        // Generar pistas\r\n        const pistasDelIntento = [\r\n            {\r\n                atributo: \"Cantante\",\r\n                acertado: guess.artist_name === cancionCorrecta.artist_name ? \"‚úÖ\" : \"‚ùå\"\r\n            },\r\n            {\r\n                atributo: \"Pa√≠s\",\r\n                acertado: guess.country === cancionCorrecta.country ? \"‚úÖ\" : \"‚ùå\"\r\n            },\r\n            {\r\n                atributo: \"A√±o\",\r\n                acertado: (() => {\r\n                    const guessYear = parseInt(guess.year);\r\n                    const correctYear = parseInt(cancionCorrecta.year);\r\n                    if (guessYear === correctYear) return \"‚úîÔ∏è Correcto\";\r\n                    if (guessYear < correctYear) return \"üîº Busca m√°s reciente\";\r\n                    return \"üîΩ Busca m√°s antiguo\";\r\n                })()\r\n            },\r\n            {\r\n                atributo: \"Ranking\",\r\n                acertado: (() => {\r\n                    const guessRank = parseInt(guess.final_place);\r\n                    const correctRank = parseInt(cancionCorrecta.final_place);\r\n\r\n                    if (guessRank === correctRank) return \"‚úîÔ∏è Correcto\";\r\n                    if (guessRank > correctRank) return \"üîº Ranking m√°s alto\";\r\n                    return \"üîΩ Ranking m√°s bajo\";\r\n                })()\r\n            }\r\n        ];\r\n\r\n        setPistas((prevPistas) => [...prevPistas, { intento: guess, pistas: pistasDelIntento }]);\r\n    };\r\n\r\n    const reiniciarJuego = () => {\r\n        // Resetear todo\r\n        const randomIndex = Math.floor(Math.random() * canciones.length);\r\n        setCancionCorrecta(canciones[randomIndex]);\r\n        setFallos([]);\r\n        setPistas([]);\r\n        setIntentosRestantes(totalIntentos);\r\n        setAcertado(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"guess-song-game\">\r\n            <Header />\r\n\r\n            <SettingsModal />\r\n\r\n            {/*{cancionCorrecta? cancionCorrecta.song_name + cancionCorrecta.year + cancionCorrecta.country : \"\"}*/}\r\n\r\n            <div className=\"contenido-principal\">\r\n\r\n                {/* Visualizaci√≥n de fallos */}\r\n                <FeedbackDisplay fallos={fallos} acertado={acertado} cancionCorrecta={cancionCorrecta} totalIntentos={totalIntentos}/>\r\n\r\n                {/* Visualizaci√≥n de pistas */}\r\n                <ClueDisplay pistas={pistas}/>\r\n\r\n                {/* Formulario de adivinanza */}\r\n                {!acertado && intentosRestantes > 0 && (\r\n                    <GuessForm canciones={canciones} onGuess={handleGuess} fallos={fallos} />\r\n                )}\r\n                {/* Bot√≥n para reiniciar cuando acabe el juego */}\r\n                {(acertado || intentosRestantes <= 0) && (\r\n                    <button onClick={reiniciarJuego} style={{ marginTop: \"20px\" }}>\r\n                        Reiniciar Juego\r\n                    </button>\r\n                )}\r\n\r\n                {/* Pistas adicionales progresivas */}\r\n                <ExtraClues songData={cancionCorrecta} fallos={fallos} acertado={acertado}/>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GuessSongGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}