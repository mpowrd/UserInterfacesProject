{"ast":null,"code":"var _jsxFileName = \"C:\\\\GITHUB PROJECTS\\\\MDS\\\\UserInterfacesProject\\\\Eurodle (la buena)\\\\eurodle\\\\src\\\\guessSong\\\\GuessSongGame.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Header from './Header';\nimport GuessForm from './GuessForm';\nimport FeedbackDisplay from './FeedbackDisplay';\nimport ClueDisplay from './ClueDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuessSongGame = () => {\n  _s();\n  const [songToGuess, setSongToGuess] = useState(\"\");\n  const [currentGuessSong, setcurrentGuessSong] = useState(\"\");\n  const [currentGuessYear, setCurrentGuessYear] = useState(\"\");\n  const [currentGuessCountry, setCurrentGuessCountry] = useState(\"\");\n  const [selectedGuessMethod, setSelectedGuessMethod] = useState(0); // 0 - SONG / 1 - YEAR & COUNTRY\n\n  const [incorrectGuesses, setIncorrectGuesses] = useState(0);\n  const [revealedClues, setRevealedClues] = useState([]);\n  const [gameStatus, setGameStatus] = useState(\"playing\");\n  const [feedbackMessage, setFeedbackMessage] = useState('');\n  function searchRandomSong() {\n    let song = \"\";\n    // TO-DO\n    return song;\n  }\n  useEffect(() => {\n    let song;\n    song = searchRandomSong();\n    setSongToGuess(song);\n  }, []);\n  const handleGuessSubmit = event => {\n    event.preventDefault();\n    if (gameStatus === \"playing\" || selectedGuessMethod === 0 && currentGuessSong !== \"\" || selectedGuessMethod === 1 && currentGuessYear !== \"\" && currentGuessCountry !== \"\") {\n      let isCorrect = false;\n      if (selectedGuessMethod === 0) {\n        isCorrect = currentGuessSong === songToGuess.name;\n      } else {\n        isCorrect = currentGuessYear === songToGuess.year && currentGuessCountry === songToGuess.country;\n      }\n      if (isCorrect) {\n        setGameStatus(\"won\");\n        setFeedbackMessage(`¡Correcto! La canción era ${songToGuess.nombre}`);\n      } else {\n        const newIncorrectGuesses = incorrectGuesses + 1;\n        setIncorrectGuesses(newIncorrectGuesses);\n        if (selectedGuessMethod === 0) {\n          setcurrentGuessSong(''); // Limpiar input;\n        } else {\n          setCurrentGuessCountry('');\n          setCurrentGuessYear('');\n        }\n        if (newIncorrectGuesses >= 7) {\n          setFeedbackMessage(`Has perdido, no te quedan más intentos :( . La canción era ${songToGuess.nombre}`);\n          setGameStatus(\"lost\");\n        } else {\n          const nextClue = newIncorrectGuesses; // La pista N se revela en el fallo N\n\n          setRevealedClues(prevClues => [...prevClues, nextClue]);\n          setFeedbackMessage(`Has fallado, sigue intentándolo. Te quedan ${7 - newIncorrectGuesses} intentos`);\n        }\n      }\n    }\n  };\n  const handleGuessChangeYear = event => {\n    setCurrentGuessYear(event.target.value);\n  };\n  const handleGuessChangeCountry = event => {\n    setCurrentGuessCountry(event.target.value);\n  };\n  const handleGuessChangeSong = event => {\n    setcurrentGuessSong(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(FeedbackDisplay, {\n      guesses: incorrectGuesses,\n      message: feedbackMessage,\n      maxGuesses: 7\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClueDisplay, {\n      songData: songToGuess,\n      revealedClues: revealedClues,\n      gameStatus: gameStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), gameStatus === 'playing' && /*#__PURE__*/_jsxDEV(GuessForm, {\n      value_country: currentGuessCountry,\n      value_year: currentGuessYear,\n      value_song: currentGuessSong,\n      value_method: selectedGuessMethod,\n      onChange_country: handleGuessChangeCountry,\n      onChange_year: handleGuessChangeYear,\n      onChange_song: handleGuessChangeSong,\n      onChange_method: setSelectedGuessMethod,\n      onSubmit: handleGuessSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }, this), (gameStatus === 'won' || gameStatus === 'lost') &&\n    /*#__PURE__*/\n    // Aquí iría un botón para reiniciar el juego (que llamaría a la lógica de inicialización de nuevo)\n    _jsxDEV(\"button\", {\n      onClick: () => window.location.reload(),\n      children: \"Jugar de nuevo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this) // Recarga simple por ahora\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(GuessSongGame, \"UEbJATYOV3LlyYWpE6UhUQ1r4pM=\");\n_c = GuessSongGame;\nexport default GuessSongGame;\nvar _c;\n$RefreshReg$(_c, \"GuessSongGame\");","map":{"version":3,"names":["useEffect","useState","Header","GuessForm","FeedbackDisplay","ClueDisplay","jsxDEV","_jsxDEV","GuessSongGame","_s","songToGuess","setSongToGuess","currentGuessSong","setcurrentGuessSong","currentGuessYear","setCurrentGuessYear","currentGuessCountry","setCurrentGuessCountry","selectedGuessMethod","setSelectedGuessMethod","incorrectGuesses","setIncorrectGuesses","revealedClues","setRevealedClues","gameStatus","setGameStatus","feedbackMessage","setFeedbackMessage","searchRandomSong","song","handleGuessSubmit","event","preventDefault","isCorrect","name","year","country","nombre","newIncorrectGuesses","nextClue","prevClues","handleGuessChangeYear","target","value","handleGuessChangeCountry","handleGuessChangeSong","className","children","fileName","_jsxFileName","lineNumber","columnNumber","guesses","message","maxGuesses","songData","value_country","value_year","value_song","value_method","onChange_country","onChange_year","onChange_song","onChange_method","onSubmit","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["C:/GITHUB PROJECTS/MDS/UserInterfacesProject/Eurodle (la buena)/eurodle/src/guessSong/GuessSongGame.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport Header from './Header';\r\nimport GuessForm from './GuessForm';\r\nimport FeedbackDisplay from './FeedbackDisplay';\r\nimport ClueDisplay from './ClueDisplay';\r\n\r\nconst GuessSongGame = () => {\r\n\r\n    const [songToGuess, setSongToGuess] = useState(\"\");\r\n\r\n    const [currentGuessSong, setcurrentGuessSong] = useState(\"\");\r\n    const [currentGuessYear, setCurrentGuessYear] = useState(\"\");\r\n    const [currentGuessCountry, setCurrentGuessCountry] = useState(\"\");\r\n    const [selectedGuessMethod, setSelectedGuessMethod] = useState(0); // 0 - SONG / 1 - YEAR & COUNTRY\r\n\r\n    const [incorrectGuesses, setIncorrectGuesses] = useState(0);\r\n    const [revealedClues, setRevealedClues] = useState([]);\r\n    const [gameStatus, setGameStatus] = useState(\"playing\");\r\n    const [feedbackMessage, setFeedbackMessage] = useState('');\r\n\r\n    function searchRandomSong(){\r\n        let song = \"\";\r\n        // TO-DO\r\n        return song;\r\n    }\r\n\r\n    useEffect( () => {\r\n        let song;\r\n        song = searchRandomSong();\r\n        setSongToGuess(song);\r\n    }, [] );\r\n\r\n    const handleGuessSubmit = (event) => {\r\n        event.preventDefault();\r\n        if((gameStatus === \"playing\")\r\n        || (selectedGuessMethod === 0 && currentGuessSong !== \"\")\r\n        || (selectedGuessMethod === 1 && currentGuessYear !== \"\" && currentGuessCountry !== \"\")){\r\n\r\n            let isCorrect = false;\r\n\r\n            if(selectedGuessMethod === 0){\r\n                isCorrect = currentGuessSong === songToGuess.name;\r\n            } else{\r\n                isCorrect = currentGuessYear === songToGuess.year && currentGuessCountry === songToGuess.country;\r\n            }\r\n\r\n            if(isCorrect){\r\n                setGameStatus(\"won\");\r\n                setFeedbackMessage(`¡Correcto! La canción era ${songToGuess.nombre}`);\r\n            } else{\r\n                const newIncorrectGuesses = incorrectGuesses + 1;\r\n                setIncorrectGuesses(newIncorrectGuesses);\r\n\r\n                if(selectedGuessMethod === 0){\r\n                    setcurrentGuessSong(''); // Limpiar input;\r\n                } else{\r\n                    setCurrentGuessCountry('');\r\n                    setCurrentGuessYear('');\r\n                }\r\n\r\n                if(newIncorrectGuesses >= 7){\r\n                    setFeedbackMessage(`Has perdido, no te quedan más intentos :( . La canción era ${songToGuess.nombre}`);\r\n                    setGameStatus(\"lost\");    \r\n\r\n                } else{\r\n                    const nextClue = newIncorrectGuesses; // La pista N se revela en el fallo N\r\n\r\n                    setRevealedClues(prevClues => [...prevClues, nextClue]);\r\n\r\n                    setFeedbackMessage(`Has fallado, sigue intentándolo. Te quedan ${7 - newIncorrectGuesses} intentos`);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const handleGuessChangeYear = (event) => {\r\n\r\n        setCurrentGuessYear(event.target.value);\r\n    \r\n    };\r\n\r\n    const handleGuessChangeCountry = (event) => {\r\n\r\n        setCurrentGuessCountry(event.target.value);\r\n    \r\n    };\r\n\r\n    const handleGuessChangeSong = (event) => {\r\n\r\n        setcurrentGuessSong(event.target.value);\r\n    \r\n    };\r\n        \r\n    return(\r\n    <div className=\"game-container\">\r\n\r\n      <Header /> {/* Puedes pasarle props si necesita interactividad */}\r\n\r\n      <FeedbackDisplay\r\n\r\n         guesses={incorrectGuesses}\r\n\r\n         message={feedbackMessage}\r\n\r\n         maxGuesses={7}\r\n\r\n      />\r\n\r\n      <ClueDisplay\r\n\r\n         songData={songToGuess}\r\n\r\n         revealedClues={revealedClues}\r\n\r\n         gameStatus={gameStatus}\r\n\r\n      />\r\n\r\n       {/* Mostrar input solo si se está jugando */}\r\n\r\n      {gameStatus === 'playing' && (\r\n\r\n         <GuessForm\r\n\r\n           value_country={currentGuessCountry}\r\n           value_year={currentGuessYear}\r\n           value_song={currentGuessSong}\r\n           value_method={selectedGuessMethod}\r\n\r\n           onChange_country={handleGuessChangeCountry}\r\n           onChange_year={handleGuessChangeYear}\r\n           onChange_song={handleGuessChangeSong}\r\n           onChange_method={setSelectedGuessMethod}\r\n\r\n           onSubmit={handleGuessSubmit}\r\n\r\n         />\r\n\r\n       )}\r\n\r\n       {/* O mostrar un botón para jugar de nuevo si won/lost */}\r\n\r\n       {(gameStatus === 'won' || gameStatus === 'lost') && (\r\n\r\n            // Aquí iría un botón para reiniciar el juego (que llamaría a la lógica de inicialización de nuevo)\r\n\r\n            <button onClick={() => window.location.reload()}>Jugar de nuevo</button> // Recarga simple por ahora\r\n\r\n       )}\r\n\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default GuessSongGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}